#Slivki Sport chat bot
import asyncio
import datetime
import sqlite3
import random
from aiogram import Bot, Dispatcher, types
from aiogram.types import ParseMode
from aiogram.utils import executor
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
import plotly.graph_objects as go
from collections import defaultdict
#class YourState(StatesGroup):
#    waiting_for_params = State()

#storage = MemoryStorage()
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
API_TOKEN = "6907418490:AAEEC1lr8FylzcsL73j3cxiQ_mX5JBEQy44"
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)
#chat_id =-1002010915177

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏ –∫–æ–º–∞–Ω–¥
#commands_keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
#commands_keyboard.add(KeyboardButton('/write'))
#commands_keyboard.add(KeyboardButton('/print'))
#commands_keyboard.add(KeyboardButton('/hist'))
#commands_keyboard.add(KeyboardButton('/clear'))

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö SQLite
conn = sqlite3.connect('workout_data.db')
cursor = conn.cursor()

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö
cursor.execute('''CREATE TABLE IF NOT EXISTS workouts (day TEXT, name TEXT, type TEXT, qty INTEGER, chat_id INTEGER)''')
conn.commit()

phrases = {
    1: "–ù–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–π—Å—è, –¥–∞–∂–µ –µ—Å–ª–∏ —Ç—ã —É—Å—Ç–∞–ª. –°–µ–≥–æ–¥–Ω—è—à–Ω–∏–µ —É—Å–∏–ª–∏—è –ø—Ä–∏–≤–µ–¥—É—Ç –∫ –∑–∞–≤—Ç—Ä–∞—à–Ω–µ–º—É —É—Å–ø–µ—Ö—É.",
    2: "–¢—ã —Å–∏–ª—å–Ω–µ–µ, —á–µ–º –¥—É–º–∞–µ—à—å. –í–µ—Ä—å –≤ —Å–µ–±—è –∏ –¥–≤–∏–≥–∞–π—Å—è –≤–ø–µ—Ä–µ–¥ –±–µ–∑ —Å—Ç—Ä–∞—Ö–∞.",
    3: "–ö–∞–∂–¥—ã–π –Ω–æ–≤—ã–π –¥–µ–Ω—å - —ç—Ç–æ –Ω–æ–≤–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å—Ç–∞—Ç—å –ª—É—á—à–µ, —á–µ–º –≤—á–µ—Ä–∞. –ò—Å–ø–æ–ª—å–∑—É–π –µ—ë –Ω–∞ –≤—Å–µ 100%.",
    4: "–¢—Ä—É–¥–Ω–æ—Å—Ç–∏ - —ç—Ç–æ –ª–∏—à—å —à–∞–≥–∏ –Ω–∞ –ø—É—Ç–∏ –∫ —Å–≤–æ–µ–π —Ü–µ–ª–∏. –ü—Ä–µ–æ–¥–æ–ª–µ–≤–∞–π –∏—Ö —Å —É–ª—ã–±–∫–æ–π –Ω–∞ –ª–∏—Ü–µ.",
    5: "–¢–≤–æ—è —Ä–µ—à–∏–º–æ—Å—Ç—å –∏ –Ω–∞—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å - —Ç–≤–æ–∏ –ª—É—á—à–∏–µ —Å–æ—é–∑–Ω–∏–∫–∏ –Ω–∞ –ø—É—Ç–∏ –∫ —É—Å–ø–µ—Ö—É. –ù–∏–∫–æ–≥–¥–∞ –Ω–µ —Å–æ–º–Ω–µ–≤–∞–π—Å—è –≤ —Å–µ–±–µ.",
    6: "–£—Å–ø–µ—Ö –ø—Ä–∏—Ö–æ–¥–∏—Ç –∫ —Ç–µ–º, –∫—Ç–æ –Ω–µ –±–æ–∏—Ç—Å—è –ø—Ä–æ–≤–∞–ª–æ–≤ –∏ –≥–æ—Ç–æ–≤ –∏–¥—Ç–∏ –≤–ø–µ—Ä–µ–¥, –Ω–µ—Å–º–æ—Ç—Ä—è –Ω–∏ –Ω–∞ —á—Ç–æ.",
    7: "–ü–æ–º–Ω–∏, —á—Ç–æ –∫–∞–∂–¥—ã–π –ø—Ä–æ–π–¥–µ–Ω–Ω—ã–π —ç—Ç–∞–ø –ø—Ä–∏–±–ª–∏–∂–∞–µ—Ç —Ç–µ–±—è –∫ —Ü–µ–ª–∏. –ù–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–π—Å—è, –∏–¥–∏ –¥–∞–ª—å—à–µ.",
    8: "–¢—ã –º–æ–∂–µ—à—å –¥–æ—Å—Ç–∏—á—å –≤—Å–µ–≥–æ, –æ —á–µ–º –º–µ—á—Ç–∞–µ—à—å, –µ—Å–ª–∏ –±—É–¥–µ—à—å —Ä–∞–±–æ—Ç–∞—Ç—å —É–ø–æ—Ä–Ω–æ –∏ –Ω–µ —Ç–µ—Ä—è—Ç—å –≤–µ—Ä—ã –≤ —Å–µ–±—è.",
    9: "–°–∞–º–æ–µ –≤–∞–∂–Ω–æ–µ - —ç—Ç–æ –Ω–∞—á–∞—Ç—å –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å. –î–∞–∂–µ —Å–∞–º—ã–π –¥–ª–∏–Ω–Ω—ã–π –ø—É—Ç—å –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –ø–µ—Ä–≤–æ–≥–æ —à–∞–≥–∞.",
    10: "–ë—É–¥—å –Ω–∞—Å—Ç–æ–π—á–∏–≤—ã–º, —Å—Ç—Ä–µ–º–∏—Å—å –∫ –ª—É—á—à–µ–º—É –∏ –≤–µ—Ä—å –≤ —Å–≤–æ–∏ —Å–∏–ª—ã. –¢—ã —Å–ø–æ—Å–æ–±–µ–Ω –Ω–∞ –±–æ–ª—å—à–µ–µ, —á–µ–º –¥—É–º–∞–µ—à—å."
}

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç!‚úåÔ∏è –Ø –°–ª–∏–≤–∫–∏-–±–æ—Ç, —Å–æ–∑–¥–∞–Ω –¥–ª—è –∑–∞–ø–∏—Å–∏ —Ç–≤–æ–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤!‚úä\n–î–ª—è –∑–∞–ø–∏—Å–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–∞–ø–∏—à–∏ –∫–æ–º–∞–Ω–¥—É /write {–ß–∏—Å–ª–æ –æ—Ç–∂–∏–º–∞–Ω–∏–π} {–ß–∏—Å–ª–æ –ø—Ä–∏—Å–µ–¥–∞–Ω–∏–π}\n –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–º–∞–Ω–¥–∞–º.\n/hist –í—ã–≤–æ–¥–∏—Ç –≥—Ä–∞—Ñ–∏–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–∞–ø–æ–∫–∏—Ç–µ–ª—å–Ω—ã–º –∏—Ç–æ–≥–æ–º\n /print –í—ã–≤–æ–¥–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –≤–∏–¥–µ –Ω–∞–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö", reply_markup=commands_keyboard)
    await schedule_random_phrases()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /write
@dp.message_handler(commands=['write'])
async def write_workout(message: types.Message):
    try:
        command, *args = message.text.split()
        day = args[2] if len(args) >= 3 else datetime.datetime.now().strftime("%Y-%m-%d")
        qty_pushups, qty_squats = map(int, args[:2])
        name = message.from_user.username
        chat_id = message.chat.id
        cursor.execute("INSERT INTO workouts VALUES (?, ?, ?, ?, ?)", (day, name, "pushups", qty_pushups, chat_id,))
        cursor.execute("INSERT INTO workouts VALUES (?, ?, ?, ?, ?)", (day, name, "squats", qty_squats, chat_id,))
        conn.commit()
        await message.answer(f"–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã: {qty_pushups} –æ—Ç–∂–∏–º–∞–Ω–∏–π\n{qty_squats} –ø—Ä–∏—Å–µ–¥–∞–Ω–∏–π.\n{name}, —Ç—ã –ø—Ä–æ—Å—Ç–æ –∫—Ä–∞—Å–∞–≤—á–∏–∫!\n–ü—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µüí™")
    except (ValueError, IndexError):
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /write <qty_pushups> <qty_squats> <–¥–µ–Ω—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ yyyy-mm-dd>")



# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /clear
@dp.message_handler(commands=['clear'])
async def clear_data(message: types.Message):
    chat_id = message.chat.id
    name = message.from_user.username
    cursor.execute("DELETE FROM workouts WHERE chat_id=? AND name=?", (chat_id, name))
    conn.commit()
    await message.answer("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω—ã.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /print
@dp.message_handler(commands=['print'])
async def print_data(message: types.Message):
    chat_id = message.chat.id
    cursor.execute("SELECT day, name, type, qty FROM workouts WHERE chat_id=?", (chat_id,))
    data = cursor.fetchall()
    if not data:
        await message.answer("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞.")
    else:
        grouped_data = defaultdict(lambda: defaultdict(int))
        for row in data:
            name = row[1]
            exercise_type = row[2]
            qty = row[3]
            grouped_data[name][exercise_type] += qty

        result_text = ""
        for name, exercises in grouped_data.items():
            result_text += f"*{name}*\n"
            for exercise_type, total_qty in exercises.items():
                result_text += f"{exercise_type}: {total_qty}\n"
            result_text += "\n"
        await message.answer(result_text, parse_mode=ParseMode.MARKDOWN)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /hist
@dp.message_handler(commands=['hist'])
async def show_history(message: types.Message):
    chat_id = message.chat.id
    cursor.execute("SELECT day, name, type, qty FROM workouts WHERE chat_id=? ORDER BY day ASC", (chat_id,))
    data = cursor.fetchall()
    days = sorted(list(set([d[0] for d in data])))
    users = list(set([d[1] for d in data]))
    fig = go.Figure()
    for user in users:
        pushups_total = 0
        squats_total = 0
        x_values = [day for day in days]
        y_values_pushups = []
        y_values_squats = []
        for day in days:
            pushups_total += sum([d[3] for d in data if d[0] == day and d[1] == user and d[2] == "pushups"])
            squats_total += sum([d[3] for d in data if d[0] == day and d[1] == user and d[2] == "squats"])
            y_values_pushups.append(pushups_total)
            y_values_squats.append(squats_total)
        fig.add_trace(go.Scatter(x=x_values, y=y_values_pushups, mode='lines', name=f"{user} - pushups"))
        fig.add_trace(go.Scatter(x=x_values, y=y_values_squats, mode='lines', name=f"{user} - squats"))
    fig.update_layout(title='Workout History', xaxis_title='Day', yaxis_title='Cumulative Quantity')
    await bot.send_photo(message.chat.id, photo=fig.to_image(format="png"))

async def send_random_phrase():
    while True:
        current_hour = datetime.datetime.now().hour
        if current_hour == random.randint(9, 12) or current_hour == random.randint(13, 22):
            random_phrase = random.choice(phrases)
            await bot.send_message(chat_id, random_phrase)
        await asyncio.sleep(3600)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É

# –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–ª—É—á–∞–π–Ω–æ–π —Ñ—Ä–∞–∑—ã –≤ —Ü–∏–∫–ª —Å–æ–±—ã—Ç–∏–π
async def schedule_random_phrases():
    loop = asyncio.get_event_loop()
    loop.create_task(send_random_phrase())

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
